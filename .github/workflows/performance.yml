name: Performance Monitoring

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  performance-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run performance monitoring
      run: npm run perf

    - name: Run bundle analysis
      run: npm run bundle-report

    - name: Check bundle size
      run: npm run size-check
      continue-on-error: true

    - name: Upload performance artifacts
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports
        path: |
          performance-metrics.json
          performance-history.json
          bundle-analysis.json
        retention-days: 30

    - name: Comment PR with performance results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const perfMetrics = JSON.parse(fs.readFileSync('performance-metrics.json', 'utf8'));
            const bundleAnalysis = JSON.parse(fs.readFileSync('bundle-analysis.json', 'utf8'));
            
            const score = perfMetrics.performance.score;
            const grade = perfMetrics.performance.grade;
            const buildTime = (perfMetrics.metrics.buildTime / 1000).toFixed(2);
            const bundleSize = perfMetrics.metrics.bundleSize.toFixed(1);
            const firstLoadJS = perfMetrics.metrics.firstLoadJS.toFixed(1);
            
            const getScoreEmoji = (score) => {
              if (score >= 90) return '🟢';
              if (score >= 80) return '🟡';
              return '🔴';
            };
            
            const comment = `## 🏆 Performance Report
            
            ${getScoreEmoji(score)} **Performance Score: ${score}/100 (${grade})**
            
            ### 📊 Key Metrics
            
            | Metric | Value | Status |
            |--------|-------|--------|
            | Build Time | ${buildTime}s | ${buildTime < 60 ? '✅' : '⚠️'} |
            | Bundle Size | ${bundleSize}KB | ${bundleSize < 500 ? '✅' : '⚠️'} |
            | First Load JS | ${firstLoadJS}KB | ${firstLoadJS < 250 ? '✅' : '⚠️'} |
            | Pages | ${perfMetrics.metrics.pageCount} | ℹ️ |
            | Chunks | ${perfMetrics.metrics.chunkCount} | ℹ️ |
            
            ### 💡 Recommendations
            
            ${perfMetrics.metrics.recommendations.length > 0 
              ? perfMetrics.metrics.recommendations.map((rec, i) => 
                  `${i + 1}. **${rec.type}**: ${rec.message}\n   - *Action*: ${rec.action}`
                ).join('\n\n')
              : '✅ No performance issues detected!'
            }
            
            <details>
            <summary>📦 Largest Chunks</summary>
            
            ${perfMetrics.metrics.largestChunks.map((chunk, i) => 
              `${i + 1}. \`${chunk.name}\`: ${chunk.size.toFixed(1)}KB`
            ).join('\n')}
            
            </details>
            
            ---
            *This comment was automatically generated by the performance monitoring workflow.*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.error('Failed to create performance comment:', error);
          }

    - name: Fail if performance score is too low
      run: |
        SCORE=$(node -p "JSON.parse(require('fs').readFileSync('performance-metrics.json', 'utf8')).performance.score")
        echo "Performance score: $SCORE"
        if [ "$SCORE" -lt 60 ]; then
          echo "❌ Performance score is below threshold (60)"
          exit 1
        fi
      shell: bash

  bundle-size-diff:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build and analyze PR
      run: |
        npm run build
        npm run bundle-report
        mv bundle-analysis.json bundle-analysis-pr.json

    - name: Checkout base branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.base_ref }}

    - name: Install dependencies (base)
      run: npm ci

    - name: Build and analyze base
      run: |
        npm run build
        npm run bundle-report
        mv bundle-analysis.json bundle-analysis-base.json

    - name: Compare bundle sizes
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const prAnalysis = JSON.parse(fs.readFileSync('bundle-analysis-pr.json', 'utf8'));
            const baseAnalysis = JSON.parse(fs.readFileSync('bundle-analysis-base.json', 'utf8'));
            
            const prSize = prAnalysis.summary.totalSize;
            const baseSize = baseAnalysis.summary.totalSize;
            const diff = prSize - baseSize;
            const diffPercent = ((diff / baseSize) * 100).toFixed(1);
            
            const diffEmoji = diff > 0 ? '📈' : diff < 0 ? '📉' : '➡️';
            const diffColor = Math.abs(diff) > 50 ? (diff > 0 ? '🔴' : '🟢') : '🟡';
            
            const comment = `## 📊 Bundle Size Comparison
            
            ${diffColor} **Bundle size change: ${diffEmoji} ${diff > 0 ? '+' : ''}${diff.toFixed(1)}KB (${diffPercent}%)**
            
            | Branch | Bundle Size | First Load JS |
            |--------|-------------|---------------|
            | Base (\`${context.base_ref}\`) | ${baseSize.toFixed(1)}KB | ${baseAnalysis.summary.firstLoadJS.toFixed(1)}KB |
            | PR (\`${context.head_ref}\`) | ${prSize.toFixed(1)}KB | ${prAnalysis.summary.firstLoadJS.toFixed(1)}KB |
            | **Difference** | **${diff > 0 ? '+' : ''}${diff.toFixed(1)}KB** | **${diff > 0 ? '+' : ''}${(prAnalysis.summary.firstLoadJS - baseAnalysis.summary.firstLoadJS).toFixed(1)}KB** |
            
            ${Math.abs(diff) > 100 ? '⚠️ **Large bundle size change detected!**' : ''}
            
            ---
            *Bundle size comparison automatically generated.*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.error('Failed to create bundle comparison comment:', error);
          }